[{"/Users/tait/Documents/Tech/p4p-table/src/index.js":"1","/Users/tait/Documents/Tech/p4p-table/src/App.js":"2","/Users/tait/Documents/Tech/p4p-table/src/reportWebVitals.js":"3","/Users/tait/Documents/Tech/p4p-table/src/FavouriteButton.js":"4","/Users/tait/Documents/Tech/p4p-table/src/Project.js":"5","/Users/tait/Documents/Tech/p4p-table/src/Projects.js":"6","/Users/tait/Documents/Tech/p4p-table/src/Filter.js":"7"},{"size":500,"mtime":1611547568498,"results":"8","hashOfConfig":"9"},{"size":1937,"mtime":1611578980355,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1611547568499,"results":"11","hashOfConfig":"9"},{"size":676,"mtime":1611649539991,"results":"12","hashOfConfig":"9"},{"size":4602,"mtime":1611649164675,"results":"13","hashOfConfig":"9"},{"size":1034,"mtime":1611649275560,"results":"14","hashOfConfig":"9"},{"size":5853,"mtime":1611644140331,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"m9dqjq",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"18"},"/Users/tait/Documents/Tech/p4p-table/src/index.js",[],["34","35"],"/Users/tait/Documents/Tech/p4p-table/src/App.js",["36"],"import React, { useState, useEffect } from 'react'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport { AppBar, CircularProgress, Container, CssBaseline, Grid, Toolbar, Typography } from '@material-ui/core'\n\nimport Projects from './Projects'\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n  },\n  nav: {\n    color: theme.palette.getContrastText(theme.palette.info.dark),\n    backgroundColor: theme.palette.info.dark,\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  fullHeight: {\n    height: '100%',\n  },\n}))\n\nfunction App() {\n  const [data, setData] = useState([]);\n\n  const getData = () => {\n    fetch('./data.json', {\n      headers: { \n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n       }\n    })\n    .then((response) => {\n      return response.json();\n    })\n    .then((myJson) => {\n      setData(myJson)\n    });\n  }\n\n  useEffect(()=>{\n    getData()\n  },[])\n\n  const classes = useStyles()\n\n  if (data.length === 0) return (\n    <div>\n      <CssBaseline />\n      <Container className={classes.container, classes.fullHeight}>\n        <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" spacing={4} className={classes.fullHeight}>\n          <Grid item>\n            <CircularProgress size={50} />\n          </Grid>\n          <Grid item>\n            <Typography variant=\"h4\">Loading Projects...</Typography>\n          </Grid>\n        </Grid>\n      </Container>\n    </div>\n  )\n\n  return (\n    <div>\n      <CssBaseline />\n      <AppBar className={classes.nav}>\n        <Toolbar>\n          <Typography variant=\"h6\">2021 Projects</Typography>\n        </Toolbar>\n      </AppBar>\n      <main>\n        <div className={classes.appBarSpacer} />\n        <Container className={classes.container}>\n          <Projects data={data} />\n        </Container>\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","/Users/tait/Documents/Tech/p4p-table/src/reportWebVitals.js",[],"/Users/tait/Documents/Tech/p4p-table/src/FavouriteButton.js",[],"/Users/tait/Documents/Tech/p4p-table/src/Project.js",["37"],"import React, { useState } from 'react'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport Paper from '@material-ui/core/Paper'\nimport { Avatar, Button, Chip, Divider, Grid, Typography } from '@material-ui/core'\nimport { red } from '@material-ui/core/colors'\n\nimport FavouriteButton from './FavouriteButton'\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    padding: theme.spacing(2),\n    margin: 'auto',\n    marginBottom: theme.spacing(4),\n  },\n  section: {\n    marginBottom: theme.spacing(2),\n  },\n  buttons: {\n    marginTop: theme.spacing(2),\n  },\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4)\n  },\n  blue: {\n    color: theme.palette.getContrastText(theme.palette.info.dark),\n    backgroundColor: theme.palette.info.dark,\n  },\n  red: {\n    color: theme.palette.getContrastText(red[500]),\n    backgroundColor: red[500],\n  },\n  right: {\n    marginLeft: 'auto',\n  },\n  list: {\n    marginTop: 0,\n  },\n}))\n\nexport default function Project({ project, isFavourite, toggleFavourite}) {\n  // const [toggled, setToggled] = useState(true)\n\n  const classes = useStyles()\n\n  // Render the UI for your table\n  return (\n    <Paper className={classes.paper}>\n      <div className={classes.section}>\n        <Grid container spacing={2} alignItems=\"center\" wrap=\"nowrap\">\n          <Grid item>\n            <Avatar className={classes.blue}>{project.id}</Avatar>\n          </Grid>\n          <Grid item>\n            <Typography variant=\"h5\">{project.title}</Typography>\n          </Grid>\n          <Grid item className={classes.right}>\n            {project.allocated\n              ? <Chip label=\"Allocated\" className={classes.red} />\n              : <Chip label=\"Unallocated\" />\n            }\n          </Grid>\n        </Grid>\n      </div>\n      <Divider/>\n      <div className={classes.section}>\n        <Typography variant=\"overline\">Description</Typography>\n        {project.description.map((description) => (\n          <Typography paragraph>{description}</Typography>\n        ))}\n      </div>\n      <Divider/>\n      <div className={classes.section}>\n        <Typography variant=\"overline\">Outcomes</Typography>\n        \n        <ul className={classes.list}>\n          {project.outcomes.map((outcome) => (\n            <li><Typography>{outcome}</Typography></li>\n          ))}\n        </ul>\n      </div>\n      <Divider />\n      <div className={classes.section}>\n        <Grid container spacing={8}>\n          <Grid item>\n            <Typography variant=\"overline\">Supervisor</Typography>\n            <Grid container spacing={1} direction=\"column\">\n              {project.supervisors.map((supervisor) => (\n                <Grid item>\n                  <Chip label={supervisor} />\n                </Grid>\n              ))}\n            </Grid>\n          </Grid>\n          {project.cosupervisors.length > 0 &&\n          <Grid item>\n            <Typography variant=\"overline\">Co-Supervisor</Typography>\n            <Grid container spacing={1} direction=\"row\">\n              {project.cosupervisors.map((cosupervisor) => (\n                <Grid item>\n                  <Chip label={cosupervisor} />\n                </Grid>\n              ))}\n            </Grid>\n          </Grid>\n          }\n        </Grid>\n      </div>\n      <Divider />\n      <div className={classes.section}>\n        <Grid container justify=\"space-between\">\n          <Grid item>\n            <Grid container direction=\"column\" spacing={1}>\n              <Grid item>\n                <Typography variant=\"overline\">Categories</Typography>\n              </Grid>\n              {project.categories.map((category) => (\n                <Grid item>\n                  <Chip label={category} />\n                </Grid>\n              ))}\n            </Grid>\n          </Grid>\n          <Grid item>\n            <Grid container direction=\"column\" spacing={1} alignItems=\"flex-end\">\n              <Grid item>\n                <Typography variant=\"overline\">Specialisations</Typography>\n              </Grid>\n              {project.specialisations.map((specialisation) => (\n                <Grid item>\n                  <Chip label={specialisation} />\n                </Grid>\n              ))}\n            </Grid>\n          </Grid>\n        </Grid>\n      </div>\n      <Divider />\n      <div className={classes.buttons}>\n        <Grid container justify=\"space-between\">\n          <FavouriteButton active={isFavourite} toggle={toggleFavourite} />\n          <Button onClick={() => window.open(project.url, '_blank')}>\n            Go to Official Page\n          </Button>\n        </Grid>\n      </div>\n    </Paper>\n  )\n}","/Users/tait/Documents/Tech/p4p-table/src/Projects.js",[],"/Users/tait/Documents/Tech/p4p-table/src/Filter.js",["38"],"import React, { useState } from 'react'\n\nimport { Checkbox, FormControl, FormControlLabel, Grid, Input, InputLabel, ListItemText, makeStyles, MenuItem, Paper, Select, Switch, Typography } from '@material-ui/core'\nimport FilterListIcon from '@material-ui/icons/FilterList'\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    padding: theme.spacing(2),\n    margin: 'auto',\n    marginBottom: theme.spacing(4),\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    width: 140,\n  },\n}))\n\nexport default function Filter(props) {\n  const [state, setState] = useState({\n    toggledFavourites: false,\n    toggledUnallocated: true,\n    selectedSupervisors: [],\n    selectedCosupervisors: [],\n    selectedSpecialisations: [],\n    selectedCategories: [],\n  })\n\n  const handleChecked = (event) => {\n    setState({...state, [event.target.name]: event.target.checked})\n  }\n\n  const handleSelect = (event) => {\n    setState({...state, [event.target.name]: event.target.value})\n  }\n\n  const classes = useStyles()\n\n  return (\n    <Paper className={classes.paper}>\n      <Grid container justify=\"space-between\" wrap=\"nowrap\" spacing={2} alignItems=\"center\">\n        <Grid item>\n          <Grid container direction=\"column\" alignItems=\"center\" spacing={0} wrap=\"nowrap\">\n            <Grid item>\n              <Typography variant=\"h6\">Filter</Typography>\n            </Grid>\n            <Grid item>\n            <Typography variant=\"button\" noWrap>({props.count})</Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item>\n          <FormControlLabel\n            control={\n              <Switch\n                checked={state.toggledFavourites}\n                onChange={handleChecked}\n                color=\"primary\"\n                name=\"toggledFavourites\"\n              />\n            }\n            label=\"Favourites\"\n            labelPlacement=\"top\" />\n        </Grid>\n        <Grid item>\n          <FormControlLabel\n            control={\n              <Switch\n                checked={state.toggledUnallocated}\n                onChange={handleChecked}\n                color=\"primary\"\n                name=\"toggledUnallocated\"\n              />\n            }\n            label=\"Unallocated\"\n            labelPlacement=\"top\" />\n        </Grid>\n        <Grid item>\n          <FormControl className={classes.formControl}>\n            <InputLabel id=\"supervisor-filter-label\">Supervisors</InputLabel>\n            <Select\n              labelId=\"supervisor-filter-label\"\n              id=\"supervisor-filter\"\n              multiple\n              value={state.selectedSupervisors}\n              onChange={handleSelect}\n              input={<Input />}\n              renderValue={(selected) => selected.join(', ')}\n              name=\"selectedSupervisors\">\n              {props.supervisors.map((supervisor) => (\n                <MenuItem key={supervisor} value={supervisor}>\n                  <Checkbox checked={state.selectedSupervisors.indexOf(supervisor) > -1} />\n                  <ListItemText primary={supervisor} />\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item>\n          <FormControl className={classes.formControl}>\n            <InputLabel id=\"cosupervisor-filter-label\">Co-Supervisors</InputLabel>\n            <Select\n              labelId=\"cosupervisor-filter-label\"\n              id=\"cosupervisor-filter\"\n              multiple\n              value={state.selectedCosupervisors}\n              onChange={handleSelect}\n              input={<Input />}\n              renderValue={(selected) => selected.join(', ')}\n              name=\"selectedCosupervisors\">\n              {props.cosupervisors.map((cosupervisor) => (\n                <MenuItem key={cosupervisor} value={cosupervisor}>\n                  <Checkbox checked={state.selectedCosupervisors.indexOf(cosupervisor) > -1} />\n                  <ListItemText primary={cosupervisor} />\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item>\n          <FormControl className={classes.formControl}>\n            <InputLabel id=\"-filter-label\">Specialisations</InputLabel>\n            <Select\n              labelId=\"specialisation-filter-label\"\n              id=\"specialisation-filter\"\n              multiple\n              value={state.selectedSpecialisations}\n              onChange={handleSelect}\n              input={<Input />}\n              renderValue={(selected) => selected.join(', ')}\n              name=\"selectedSpecialisations\">\n              {props.specialisations.map((specialisation) => (\n                <MenuItem key={specialisation} value={specialisation}>\n                  <Checkbox checked={state.selectedSpecialisations.indexOf(specialisation) > -1} />\n                  <ListItemText primary={specialisation} />\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item>\n          <FormControl className={classes.formControl}>\n            <InputLabel id=\"category-filter-label\">Categories</InputLabel>\n            <Select\n              labelId=\"category-filter-label\"\n              id=\"category-filter\"\n              multiple\n              value={state.selectedCategories}\n              onChange={handleSelect}\n              input={<Input />}\n              renderValue={(selected) => selected.join(', ')}\n              name=\"selectedCategories\">\n              {props.categories.map((category) => (\n                <MenuItem key={category} value={category}>\n                  <Checkbox checked={state.selectedCategories.indexOf(category) > -1} />\n                  <ListItemText primary={category} />\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </Grid>\n      </Grid>\n    </Paper>\n  )\n}",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":50,"column":46,"nodeType":"45","messageId":"46","endLine":50,"endColumn":47},{"ruleId":"47","severity":1,"message":"48","line":1,"column":17,"nodeType":"49","messageId":"50","endLine":1,"endColumn":25},{"ruleId":"47","severity":1,"message":"51","line":4,"column":8,"nodeType":"49","messageId":"50","endLine":4,"endColumn":22},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'FilterListIcon' is defined but never used.","no-global-assign","no-unsafe-negation"]